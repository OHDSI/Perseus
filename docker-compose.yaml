services:
#  backend:
#    build: .
#    container_name:
#      perseus-backend
#    network_mode: "host"
#    restart: always
#    environment:
#      CDM_SOUFFLEUR_ENV: "prod"
#    env_file:
#      - back-envs.txt
#  frontend:
#    build: ./UI
#    container_name:
#      perseus-frontend
#    network_mode: "host"
#    restart: always
#  db:
#    build: ./database
#    container_name:
#      perseus-database
#    volumes:
#      - type: volume
#        source: perseusdb
#        target: /var/lib/postgresql/data
#    ports:
#      - "5431:5432"
#    restart: always
#  white_rabbit:
#    build: ../WhiteRabbit
#    container_name:
#      white-rabbit-service
#    network_mode: "host"
#    restart: always
#  dqd_service:
#    build:
#      context: ../DataQualityDashboard
#      args:
#        prop: prod
#    container_name:
#      dqd-service
#    network_mode: "host"
#    restart: always
#  r_serve:
#    build:
#      context: ../DataQualityDashboard/R
#      args:
#        prop: prod
#    container_name:
#      r-serve
#    network_mode: "host"
#    restart: always
#  cdm_builder:
#    build:
#      context: ../ETL-CDMBuilder/
#      dockerfile: ../ETL-CDMBuilder/source/org.ohdsi.cdm.presentation.builderwebapi/Dockerfile
#    container_name:
#      cdm-builder-service
#    network_mode: "host"
#    restart: always
#  web:
#    image: nginx
#    container_name:
#      web
#    volumes:
#      - type: bind
#        source: ./nginx/default.conf
#        target: /etc/nginx/conf.d/default.conf
#    ports:
#      - "80:80"
#    restart: always
  vocabulary:
    build: ./vocabulary-db
    container_name: vocabulary
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "vocabulary", "-U", "perseus" ]
      timeout: 60s
      interval: 30s
      retries: 10
    volumes:
      - vocabularydb:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - vocabulary
    restart: always
  perseus-db:
    container_name: perseus-db
    image: postgres
    environment:
      POSTGRES_USER: perseus
      POSTGRES_PASSWORD: password
      POSTGRES_DB: perseus
      PGDATA: /data/postgres
    volumes:
      - perseusdb:/data/postgres
      - ./perseus-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5401:5432"
    networks:
      - perseus
    restart: always
  perseus-api:
    build: ./perseus-api
    command: python /app/main.py
    container_name: perseus-api
    environment:
      PERSEUS_ENV: Local
      TOKEN_SECRET_KEY: Perseus-Arcad!a
    ports:
      - "5000:5000"
    depends_on:
      - perseus-db
    networks:
      - perseus
  athena:
    image: solr
    container_name: athena
    command:
      - solr-precreate
      - athena
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8983/solr/athena/admin/ping?wt=json | grep -Po '\"status\": *\"OK\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./athena-solr/db-data-config.xml:/opt/solr/server/solr/configsets/_default/conf/db-data-config.xml
      - ./athena-solr/managed-schema:/opt/solr/server/solr/configsets/_default/conf/managed-schema
      - ./athena-solr/solrconfig.xml:/opt/solr/server/solr/configsets/_default/conf/solrconfig.xml
      - ./athena-solr/postgresql-42.2.19.jar:/opt/solr/dist/postgresql-42.2.19.jar
      - athena:/var/solr
    ports:
      - "8983:8983"
    networks:
      - vocabulary
      - athena
    depends_on:
      - vocabulary
  athena-api:
    build: ./athena-api
    command: python /app/main.py
    container_name: athena-api
    environment:
      ATHENA_ENV: Prod
    ports:
      - "5050:5050"
    depends_on:
      - athena
    networks:
      - athena
  usagi-db:
    container_name: usagi-db
    image: postgres
    environment:
      POSTGRES_USER: perseus
      POSTGRES_PASSWORD: password
      POSTGRES_DB: usagi
      PGDATA: /data/postgres
    volumes:
      - usagidb:/data/postgres
      - ./usagi-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5402:5432"
    networks:
      - usagi
    restart: always
  usagi-api:
    build: ./usagi-api
    command: python /app/main.py
    container_name: usagi-api
    environment:
      USAGI_ENV: Local
    ports:
      - "5150:5150"
    depends_on:
      - usagi-db
    networks:
      - usagi

networks:
  vocabulary:
    driver: bridge
  perseus:
    driver: bridge
  athena:
    driver: bridge
  usagi:
    driver: bridge

volumes:
  vocabularydb:
  perseusdb:
  athena:
  usagidb:
